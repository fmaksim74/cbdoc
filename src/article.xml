<article xml:id="masterdataview" xml:lang="ru" xml:base=".">
  <articleinfo>
    <title>Представление для просмотрa данных операции</title>
    <author>Федорченко М.И.</author>
  </articleinfo>
  <para>Основным методом хранения значений параметров операций является хранение пар <emphasis>Имя=Значение</emphasis> в таблице <database>dbo.top_ParamValues</database>. Но сейчас для упрощения обработки данных используются обычные таблицы с колонками соответсвующими параметрам операции. Синхронизацию данных между таблицами обеспечивают тригеры на <database>dbo.top_ParamValues</database>, на таблице операции, на таблице <database>dbo.top_Chains</database> где хранятся общие свойства всех операций ОДБ и генерируемая из Конструктора операций процедура с именем <emphasis>p + &lt;имя таблицы&gt;</emphasis>. Т.о. каждое изменение данных совпровождается выполнением, как минимум, 2-х не мальнеких процедур на T-SQL.</para>
  
  <para>Этот подход требует дополнительных усилий от разработчика:</para>
  <orderedlist numeration="arabic" spacing="compact">
    <listitem>
      <para>Необходимо поддерживать структуру таблицы операции в соответствии с параметрами операции. Для этого, при изменении параметров операции, требуется пересоздавать таблицу средствами конструктора или менять структуру таблицы вручную с помощью соответствующих DDL выражений.</para>
    </listitem>
    <listitem>
      <para>Необходимо поддерживать в актуальном сосотоянии процедуру <emphasis>p + &lt;имя таблицы&gt;</emphasis> чтобы значения новых параметров корректно сохранялись.</para>
    </listitem>
    <listitem>
      <para>Необходимо поддерживать в акутальном состоянии тригер на обновление таблицы операции.</para>
    </listitem>
  </orderedlist>

  <para>Использование пересоздания средствами Конструктора операций имеет свои ограничения:</para>
  <orderedlist numeration="arabic" spacing="compact">
    <listitem>
      <para>Пересоздание таблицы может приводить к потере уже имеющихся данных.</para>
    </listitem>
    <listitem>
      <para>Пересоздание таблицы всегда спровождается обновлением связанной с ней процедуры. Из-за этого мы или отказываемся от возможности изменять и дополнять процедуру, или отказываемся от использования Конструктора операций.</para>
    </listitem>
  </orderedlist>
  <para>Чтобы избавиться от перечисленных проблемм можно использовать представление извлекающее данные операции и преобразующее их из вертикальной формы в горизонтальную.</para>
  <programlisting>
<co id="oper-record-co" linkends="oper-record"/>  WITH oper_record AS (
    SELECT IDChain            = ID             ,
           OperRegNom         = RegNom         ,
           OperType           = TypeOper       ,
           OperDate           = [Date]         ,
           OperNotes          = Notes          ,
           OperIDfilial       = IDFilial       ,
           OperNextAction     = NextAction     ,
           OperNewRecord      = NewRecord      ,
           OperChanged        = Changed        ,
           OperIsExport       = IsExport       ,
           OperSUNAME3        = SUNAME3        ,
           OperTimeCreate     = TimeCreate     ,
           OperIsCompliled    = IsCompleted    ,
           OperMarkForDelete  = MarkForDelete  ,
           OperNoRemoteDelete = NoRemoteDeleted
      FROM top_Chains
<co id="type-filter-co" linkends="type-filter"/>   WHERE TypeOper = &lt;тип операции&gt;)
<co id="oper-data-co" linkends="oper-data"/>    ,oper_data AS (
    SELECT IDChain = tpv.IDChain,
           ShortName = CONVERT(VARCHAR(255), tpt.ShortName),
           PValue = NULLIF(LTRIM(RTRIM(tpv.PValue)),'')
      FROM top_Chains AS toc
           INNER JOIN top_ParametrType AS tpt 
             ON tpt.TypeOper = toc.TypeOper
           LEFT OUTER JOIN top_ParamValues AS tpv 
             ON tpv.IDChain = toc.ID 
            AND tpv.IDParam = tpt.ID
     WHERE tpt.TypeOper = &lt;тип операции&gt;)
    ,oper_pivot_data AS (
    SELECT IDChain,
    
<co id="params-co" linkends="params"/>           /* параметры операции */ <lineannotation></lineannotation>
           &lt;имя параметра&gt; = CONVERT(&lt;тип операции&gt;, &lt;имя параметра&gt;)

      FROM oper_data
     PIVOT (MAX(PValue)
            FOR ShortName IN (&lt;параметры операции&gt;)
           ) pvt)
    ,full_data AS (
    SELECT orec.*,
           odat.*
      FROM oper_record AS rec
           INNER JOIN oper_pivot_data AS dat
             ON odat.IDChain = orec.IDChain)
    SELECT * FROM full_data;
  </programlisting>
  <calloutlist>
    <callout id="oper-record" arearefs="oper-record-co">
      <para>Считываем общие свойства операции.</para>
    </callout>
    <callout id="type-filter" arearefs="type-filter-co">
      <para>Условие можно было и не добавлять, но тогда при не совпадении типа операции и списка параметров выполнение запроса <coref  linkend="oper-data-co"/>  будет завершаться ошибкой. С условием же мы просто получим пустую выборку.</para>
    </callout>
    <callout id="oper-data" arearefs="oper-data-co">
      <para>Извлекаем список параметров операции и их значения. Некоторые значения параметров могут быть не заполнены и тогда в <database>dbo.top_ParamValues</database> не будет соответвующей строки. Поэтому сначала извдекается полный список параметров операции, а затем через LEFT JOIN извлекаются их значения.</para>
    </callout>
    <callout id="params" arearefs="params-co">
      <para>Список параметров операции с преобразованием к соответсвующему типу данных.</para>
    </callout>
  </calloutlist>
  <para>Данный подход требует поддерживать список параметров операции в CTE <varname>oper_data</varname>. При этом необходимость в тригерах и процедурах полностью отпадает. Для ускорения работы представления его можно сделать индексированным.</para>
</article>
